[{"D:\\Learning\\IT-Incubator\\js-ts-advanced\\src\\index.tsx":"1","D:\\Learning\\IT-Incubator\\js-ts-advanced\\src\\redux\\state.ts":"2","D:\\Learning\\IT-Incubator\\js-ts-advanced\\src\\App.tsx":"3","D:\\Learning\\IT-Incubator\\js-ts-advanced\\src\\redux\\currencyReducer.ts":"4","D:\\Learning\\IT-Incubator\\js-ts-advanced\\src\\lessons\\lesson2\\lesson2.ts":"5","D:\\Learning\\IT-Incubator\\js-ts-advanced\\src\\lessons\\lesson4\\Lesson4.tsx":"6","D:\\Learning\\IT-Incubator\\js-ts-advanced\\src\\lessons\\lesson4\\lesson_4.ts":"7","D:\\Learning\\IT-Incubator\\js-ts-advanced\\src\\lessons\\lesson3\\Lesson3.tsx":"8","D:\\Learning\\IT-Incubator\\js-ts-advanced\\src\\lessons\\lesson3\\API.ts":"9","D:\\Learning\\IT-Incubator\\js-ts-advanced\\src\\lessons\\lesson3\\lesson_3.ts":"10","D:\\Learning\\IT-Incubator\\js-ts-advanced\\src\\lessons\\lesson5\\lesson5.ts":"11"},{"size":319,"mtime":1609752860853,"results":"12","hashOfConfig":"13"},{"size":286,"mtime":1609751766196,"results":"14","hashOfConfig":"13"},{"size":619,"mtime":1674000756327,"results":"15","hashOfConfig":"13"},{"size":1088,"mtime":1609753971088,"results":"16","hashOfConfig":"13"},{"size":4883,"mtime":1668470608720,"results":"17","hashOfConfig":"13"},{"size":1244,"mtime":1670683646493,"results":"18","hashOfConfig":"13"},{"size":6109,"mtime":1670686023372,"results":"19","hashOfConfig":"13"},{"size":1871,"mtime":1672867966488,"results":"20","hashOfConfig":"13"},{"size":542,"mtime":1672867890849,"results":"21","hashOfConfig":"13"},{"size":580,"mtime":1613893566000,"results":"22","hashOfConfig":"13"},{"size":6624,"mtime":1674082908490,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"c123te",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"39"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\Learning\\IT-Incubator\\js-ts-advanced\\src\\index.tsx",[],["52","53"],"D:\\Learning\\IT-Incubator\\js-ts-advanced\\src\\redux\\state.ts",[],"D:\\Learning\\IT-Incubator\\js-ts-advanced\\src\\App.tsx",[],"D:\\Learning\\IT-Incubator\\js-ts-advanced\\src\\redux\\currencyReducer.ts",[],"D:\\Learning\\IT-Incubator\\js-ts-advanced\\src\\lessons\\lesson2\\lesson2.ts",["54"],"console.log('lesson 2');\r\n\r\n// Lexical environment\r\n// http://jsflow.org/docs/lex-env/\r\n\r\n//// Closure\r\n// https://learn.javascript.ru/closure\r\n// https://developer.mozilla.org/ru/docs/Web/JavaScript/Closures\r\n// https://medium.com/@stasonmars/%D0%BF%D0%BE%D0%BD%D0%B8%D0%BC%D0%B0%D0%B5%D0%BC-%D0%B7%D0%B0%D0%BC%D1%8B%D0%BA%D0%B0%D0%BD%D0%B8%D1%8F-%D0%B2-javascript-%D1%80%D0%B0%D0%B7-%D0%B8-%D0%BD%D0%B0%D0%B2%D1%81%D0%B5%D0%B3%D0%B4%D0%B0-c211805b6898\r\n// https://www.youtube.com/watch?v=pahO5XjnfLA\r\n\r\n//// Сurrying\r\n// https://learn.javascript.ru/currying-partials\r\n// https://medium.com/@stasonmars/%D0%BF%D0%BE%D0%BD%D0%B8%D0%BC%D0%B0%D0%B5%D0%BC-%D0%BA%D0%B0%D1%80%D1%80%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5-%D0%B2-javascript-5ec4a1d88827\r\n\r\n// Pattern Module\r\n// https://habr.com/ru/company/ruvds/blog/419997/\r\n\r\n// Recursion\r\n// https://learn.javascript.ru/recursion\r\n// https://www.youtube.com/watch?v=Kuq6oIN3PH0\r\n\r\n\r\n// Task 01\r\n// Реализовать функцию sum которая суммирует 2 числа следующим образом sum(3)(6) === 9\r\nconst sum = (num1: number) => (num2: number) => num1 + num2;\r\nconsole.log(sum(3)(6));\r\n\r\n// Task 02\r\n// Реализовать функцию makeCounter которая работает следующим образом:\r\n// const counter = makeCounter();\r\n// counter(); // 1\r\n// counter(); // 2\r\n// const counter2 = makeCounter();\r\n// counter2(); // 1\r\n// counter(); // 3\r\nconst makeCounter = () => {\r\n    let count = 0;\r\n    return () => ++count;\r\n};\r\nconst counter = makeCounter();\r\nconsole.log(counter());\r\nconsole.log(counter());\r\nconst counter2 = makeCounter();\r\nconsole.log(counter2());\r\nconsole.log(counter());\r\n\r\n// Task 03 НЕ РЕШИЛ!!!!!!!\r\n// Переписать функцию из Task 02 так, что бы она принимала число в качестве аргумента и это число было стартовым значением счетчика\r\n// и возвращала следующий объект методов:\r\n// increase: +1\r\n// decrease: -1\r\n// reset: установить счетчик в 0;\r\n// set: установить счетчик в заданное значение;\r\nfunction makeCounter2(count?: number) {\r\n    let _currentCount: number;\r\n    return (\r\n        {\r\n            increase() {\r\n                return _currentCount++;\r\n            },\r\n            decrease() {\r\n                return _currentCount--;\r\n            },\r\n            reset() {\r\n                _currentCount = 0;\r\n            },\r\n            set() {\r\n                if (count) {\r\n                    _currentCount = count;\r\n                }\r\n            },\r\n        }\r\n    );\r\n}\r\nmakeCounter2(9).set();\r\nconsole.log(makeCounter2().increase());\r\nconsole.log(makeCounter2().decrease());\r\nmakeCounter2().reset();\r\nconsole.log(makeCounter2().increase());\r\n\r\n// Task 04*\r\n// Реализовать функцию superSum которая принимает число в качестве аргумента, которое указывает на количество слагаемых\r\n// и что бы корректно работали следующие вызовы:\r\n// 1) superSum(0) //0\r\n// 2) superSum(3)(2)(5)(3) //10\r\n// 3) superSum(3)(2)(5,3) //10\r\n// 4) superSum(3)(2,5,3) //10\r\n// 5) superSum(3)(2,5)(3) //10\r\n// 6) superSum(3)(2,5)(3,9) //10\r\nfunction superSum(n: number) {\r\n    if (n === 0) return 0;\r\n    if (n === 1) return (num: number) => num;\r\n\r\n    let _arguments: number[] = [];\r\n\r\n    function helper(...args: number[]) {\r\n        _arguments = [..._arguments, ...args];\r\n        if (_arguments.length >= n) {\r\n            _arguments.length = n;\r\n            return _arguments.reduce((acc, number) => acc + number);\r\n        } else {\r\n            return helper;\r\n        }\r\n    }\r\n\r\n    return helper;\r\n}\r\n\r\nconsole.log(superSum(0));\r\n// @ts-ignore\r\nconsole.log(superSum(3)(2)(5)(3));\r\n// @ts-ignore\r\nconsole.log(superSum(3)(2)(5, 3));\r\n// @ts-ignore\r\nconsole.log(superSum(3)(2, 5, 3));\r\n// @ts-ignore\r\nconsole.log(superSum(3)(2, 5)(3));\r\n// @ts-ignore\r\nconsole.log(superSum(3)(2, 5)(3, 9));\r\n// P.S. типизируйте только аргументы, а при вызове функции используйте @ts-ignore\r\n\r\n// Task 05\r\n// решить все задачи по рекурсии которые даны в конце статьи https://learn.javascript.ru/recursion\r\n\r\n// Task 06\r\n// написать функцию, которая повторяет функционал метода flat массива на всю глубину.\r\nconst myFlat = (arr: Array<any>): any => {\r\n    return arr.reduce((acc, val) => Array.isArray(val) ? [...acc, ...myFlat(val)] : [...acc, val], []);\r\n};\r\nconsole.log(myFlat([1, 2, [3, 4, [5, 6, [7, 8, [9, 10]]]]]));\r\n\r\n// just a plug\r\nexport default () => {\r\n};",["55","56"],"D:\\Learning\\IT-Incubator\\js-ts-advanced\\src\\lessons\\lesson4\\Lesson4.tsx",[],["57","58"],"D:\\Learning\\IT-Incubator\\js-ts-advanced\\src\\lessons\\lesson4\\lesson_4.ts",["59","60","61","62","63","64"],"import {log} from \"util\";\r\n\r\nconsole.log('lesson 4');\r\n\r\n// http://latentflip.com/loupe/?code=JC5vbignYnV0dG9uJywgJ2NsaWNrJywgZnVuY3Rpb24gb25DbGljaygpIHsKICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gdGltZXIoKSB7CiAgICAgICAgY29uc29sZS5sb2coJ1lvdSBjbGlja2VkIHRoZSBidXR0b24hJyk7ICAgIAogICAgfSwgMjAwMCk7Cn0pOwoKY29uc29sZS5sb2coIkhpISIpOwoKc2V0VGltZW91dChmdW5jdGlvbiB0aW1lb3V0KCkgewogICAgY29uc29sZS5sb2coIkNsaWNrIHRoZSBidXR0b24hIik7Cn0sIDUwMDApOwoKY29uc29sZS5sb2coIldlbGNvbWUgdG8gbG91cGUuIik7!!!PGJ1dHRvbj5DbGljayBtZSE8L2J1dHRvbj4%3D\r\n// https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/\r\n\r\n\r\n// Task 01\r\n// Создайте промис, который постоянно находиться в состоянии pending.\r\n// В конструкторе промиса выведите в консоль сообщение \"Promise is created\".\r\nconst promise1 = new Promise(() => {\r\n    console.log(\"Promise is created\");\r\n});\r\n\r\n// Task 02\r\n// Создайте промис, который после создания сразу же переходит в состояние resolve\r\n// и возвращает строку 'Promise Data'\r\n// Получите данные промиса и выведите их в консоль\r\nconst promise2 = new Promise((resolve, reject) => {\r\n    resolve('Promise Data');\r\n})\r\n    .then(res => console.log(res));\r\n\r\n// Task 03\r\n// Создайте промис, который после создания сразу же переходит в состояние rejected\r\n// и возвращает строку 'Promise Error'\r\n// Получите данные промиса и выведите их в консоль\r\nconst promise3 = new Promise((resolve, reject) => {\r\n    reject('Promise Error');\r\n})\r\n    .catch(res => console.log(res));\r\n\r\n// Task 04\r\n// Создайте промис, который переходит в состояние resolved через 3с.\r\n// (Используйте setTimeout)\r\n// и возвращает строку 'Promise Data'\r\n// Получите данные промиса и выведите их в консоль\r\nconst promise4 = new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n        resolve('Promise Data');\r\n    }, 3000);\r\n})\r\n    .then(res => console.log(res));\r\n\r\n// Task 05\r\n// Создайте литерал объекта handlePromise со следующими свойствами:\r\n// promise, resolve, reject, onSuccess, onError\r\n// Проинициализируйте первые три свойства null,\r\n// а последние два функциями, которые принимают один параметр и выводят\r\n// в консоль сообщения: первая - `Promise is resolved with data: ${paramName}`\r\n// вторая - `Promise is rejected with error: ${paramName}`\r\n// Создайте три обработчика события click для кнопок \"Create Promise\", \"Resolve Promise\", \"Reject Promise\".\r\n// Первый обработчик, создает промис, заполняет первые три свойства,\r\n// описаного выше объекта: свойство promise получает новый созданный промис,\r\n// свойства resolve и reject получают ссылки на соответствующие функции\r\n// resolve и reject. Следующие два обработчика запускают методы resolve и reject.\r\ntype HandlePromiseType = {\r\n    promise: Promise<any> | null;\r\n    resolve: ((paramName: string) => void) | null;\r\n    reject: ((paramName: string) => void) | null;\r\n    onSuccess: (paramName: string) => void;\r\n    onError: (paramName: string) => void;\r\n}\r\nexport const handlePromise: HandlePromiseType = {\r\n    promise: null,\r\n    resolve: null,\r\n    reject: null,\r\n    onSuccess(paramName: string) {\r\n        console.log(`Promise is resolved with data: ${paramName}`);\r\n    },\r\n    onError(paramName: string) {\r\n        console.log(`Promise is rejected with error: ${paramName}`);\r\n    },\r\n};\r\n\r\n// Task 06\r\n// Создайте промис, который через 1 с возвращает строку \"My name is\".\r\n// Создайте функцию onSuccess, которая получает один параметр,\r\n// прибавляет к нему Ваше имя и возвращает новую строку из функции\r\n// Создайте функцию print, которая выводит в консоль значение своего параметра\r\n// Добавьте два метода then и передайте созданные функции.\r\nconst promise6 = new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n        resolve('My name is');\r\n    }, 1000);\r\n});\r\nconst onSuccess = (str: string | unknown) => {\r\n    return `${str}, Volodymyr`;\r\n};\r\nconst print = (param: string) => {\r\n    console.log(param);\r\n};\r\npromise6.then(val => onSuccess(val)).then(val => print(val));\r\n\r\n// Task 7\r\n// Создайте три промиса. Первый промис возвращает объект { name: \"Anna\" } через 2с,\r\n// второй промис возвращает объект {age: 16} через 3 с, а третий {city: ''} через 4с.\r\n// Получите результаты работы промисов, объедините свойства объектов\r\n// и выведите в консоль {name, age, city}\r\nconst promise71 = new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n        resolve({name: \"Anna\"});\r\n    }, 2000);\r\n});\r\nconst promise72 = new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n        resolve({age: 16});\r\n    }, 3000);\r\n});\r\nconst promise73 = new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n        resolve({city: ''});\r\n    }, 1000);\r\n});\r\nPromise.all([promise71, promise72, promise73]).then((res) => {\r\n    let result = {};\r\n    res.forEach(el => result = {...result, ...(el as Object)})\r\n    console.log(result);\r\n});\r\n\r\n// just a plug\r\nexport default () => {\r\n};","D:\\Learning\\IT-Incubator\\js-ts-advanced\\src\\lessons\\lesson3\\Lesson3.tsx",[],"D:\\Learning\\IT-Incubator\\js-ts-advanced\\src\\lessons\\lesson3\\API.ts",[],"D:\\Learning\\IT-Incubator\\js-ts-advanced\\src\\lessons\\lesson3\\lesson_3.ts",["65"],"console.log('lesson 3');\r\n\r\n// Event loop\r\n// https://learn.javascript.ru/event-loop\r\n// https://habr.com/ru/company/ruvds/blog/340508/\r\n// https://www.youtube.com/watch?v=8aGhZQkoFbQ\r\n// https://www.youtube.com/watch?v=j4_9BZezSUA\r\n// https://www.jsv9000.app/\r\n\r\n// Promise\r\n// https://learn.javascript.ru/promise-basics\r\n// https://www.youtube.com/watch?v=1idOY3C1gYU\r\n\r\n\r\n// https://jsonplaceholder.typicode.com/posts/1\r\n// https://habr.com/ru/company/oleg-bunin/blog/417461/?_ga=2.54695343.543933152.1602500664-1040035071.1596811661\r\n\r\n\r\n// just a plug\r\nexport default ()=>{};","D:\\Learning\\IT-Incubator\\js-ts-advanced\\src\\lessons\\lesson5\\lesson5.ts",["66","67"],{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","severity":1,"message":"73","line":134,"column":1,"nodeType":"74","endLine":135,"endColumn":3},{"ruleId":"68","replacedBy":"75"},{"ruleId":"70","replacedBy":"76"},{"ruleId":"68","replacedBy":"77"},{"ruleId":"70","replacedBy":"78"},{"ruleId":"79","severity":1,"message":"80","line":1,"column":9,"nodeType":"81","messageId":"82","endLine":1,"endColumn":12},{"ruleId":"79","severity":1,"message":"83","line":12,"column":7,"nodeType":"81","messageId":"82","endLine":12,"endColumn":15},{"ruleId":"79","severity":1,"message":"84","line":20,"column":7,"nodeType":"81","messageId":"82","endLine":20,"endColumn":15},{"ruleId":"79","severity":1,"message":"85","line":29,"column":7,"nodeType":"81","messageId":"82","endLine":29,"endColumn":15},{"ruleId":"79","severity":1,"message":"86","line":39,"column":7,"nodeType":"81","messageId":"82","endLine":39,"endColumn":15},{"ruleId":"72","severity":1,"message":"73","line":123,"column":1,"nodeType":"74","endLine":124,"endColumn":3},{"ruleId":"72","severity":1,"message":"73","line":20,"column":1,"nodeType":"74","endLine":20,"endColumn":23},{"ruleId":"79","severity":1,"message":"87","line":145,"column":10,"nodeType":"81","messageId":"82","endLine":145,"endColumn":23},{"ruleId":"72","severity":1,"message":"73","line":158,"column":1,"nodeType":"74","endLine":159,"endColumn":3},"no-native-reassign",["88"],"no-negated-in-lhs",["89"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration",["88"],["89"],["88"],["89"],"@typescript-eslint/no-unused-vars","'log' is defined but never used.","Identifier","unusedVar","'promise1' is assigned a value but never used.","'promise2' is assigned a value but never used.","'promise3' is assigned a value but never used.","'promise4' is assigned a value but never used.","'sumTwoNumbers' is defined but never used.","no-global-assign","no-unsafe-negation"]